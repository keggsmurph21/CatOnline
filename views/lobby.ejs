<!-- views/index.js -->

<!DOCTYPE html>
<html>
<head>
  <title>CatOnline &mdash; Lobby</title>
  <link rel="stylesheet" href="/styles/style.css">
  <link rel="SHORTCUT ICON" href="images/favicon.ico" />
  <link rel="icon" href="images/favicon.ico" type="image/ico" />
</head>

<body>

  <div class="lobby content">

    <div class="frame" id="messages">
      <div class="panel" id="messages">
        <div class="messages public">
          <ul class="messages">
            <li class='message admin center'><strong>Welcome to CatOnline chat!</strong></li>
          </ul>
        </div>
        <div class="messages status">
          currently online: <span class="currently-online">0</span>
        </div>
        <div class="messages input">
          <input class="messages" placeholder="type your message here ...">
        </div>
      </div>
    </div>

    <div class="frame" id="lists">
      <!-- show any messages -->
      <% if (message.length > 0) { %>
        <p class="alert alert-danger"><%= message %></p>
      <% } %>

      <div class="lobby container" id="host-new-game">
        <form class="lobby" action="/newgame" method="post">

          <button id="new-game-show">Host</button>
          <br />

          <div class="lobby new-game" id="show-hide" style="display:none;">
            <div class="lobby new-game" id="config-container">
              <div class="lobby new-game subcontainer" id="dropdowns">
                <% for (var key in config.strings) {
                  value = config.strings[key]; %>
                  <span class="lobby new-game setting" id="<%= key %>">
                    <%= value.label %>:&nbsp;
                    <select class="lobby" name="<%= key %>" >
                      <% for (i=0; i< value.options.length; i++) {
                        if (value.options[i] === value.default) { %>
                          <option value="<%= value.options[i] %>" selected="selected">
                        <% } else { %>
                          <option value="<%= value.options[i] %>">
                        <% } %>
                          <%= value.options[i] %>
                        </option>
                      <% } %>
                    </select>
                  </span>
                <% }  %>
              </div>
              <div class="lobby new-game subcontainer" id="ranges">
                <% for (var key in config.ints) {
                  value = config.ints[key]; %>
                  <span class="lobby new-game setting" id="<%= key %>">
                    <%= value.label %>:&nbsp;
                    <input class="lobby" type="number" step="1" pattern="\d+" min="<%=value.min%>" max="<%=value.max%>" value="<%=value.default%>" name="<%= key %>" />
                  </span>
                <% } %>
              </div>
              <div class="lobby new-game subcontainer" id="checkboxes">
                <% for (var key in config.bools) {
                  value = config.bools[key]; %>
                  <span class="lobby new-game setting" id="<%= key %>">
                    <%= value.label %>:&nbsp;
                    <input class="lobby" type="checkbox" name="<%= key %>" <%= value.default ? 'checked' : '' %>>
                  </span>
                <% } %>
              </div>
            </div>
            <button id="new-game-submit">New game</button>
          </div>
        </form>

      </div>

      <div class="lobby container" id="active-games-cont">
        <p>In-progress games</p>
        <table class="lobby gamelist" id="active-games">
          <tr class="lobby header">
            <th>Turn</th>
            <th>Scenario</th>
            <th>Players</th>
            <!--<th>CPUs</th>-->
            <th>Owner</th>
            <th>Modified</th>
          </tr>
        </table>
      </div>

      <div class="lobby container" id="pending-games-cont">
        <p>Pending games</p>
        <table class="lobby gamelist" id="pending-games">
          <tr class="lobby header">
            <th>Status</th>
            <th>Scenario</th>
            <th>Humans</th>
            <!--<th>CPUs</th>-->
            <th>Owner</th>
            <th>Modified</th>
          </tr>
        </table>
      </div>

      <div class="lobby container" id="available-games-cont">
        <p>Available games</p>
        <table class="lobby gamelist" id="available-games">
          <tr class="lobby header">
            <th>Status</th>
            <th>Scenario</th>
            <th>Humans</th>
            <!--<th>CPUs</th>-->
            <th>Owner</th>
            <th>Modified</th>
          </tr>
        </table>
      </div>

      <div class="lobby container" id="private-code">
        <p>Enter a private code</p>
        <span>
          <form action="/join" method="post">
            <input type="text" name="gameid" pattern=".{24}" id="private-code-input" required>
            <button type="submit" id="join-by-code">Join</button>
          </form>
        </span>
        <p id="put-shit-here"></p>
      </div>
    </div>

  </div>

  <%- include( 'banner.ejs' ) %>





  <script src='/socket.io/socket.io.js'> </script>
  <script src='http://code.jquery.com/jquery-latest.min.js'> </script>
  <script>

    // FUNCTIONS
    function forceTwoDigits(num) {
      return num > 9 ? '' + num : '0' + num;
    }
    function getTimeStr() {
      let datetime = new Date();
      let datestr =
        forceTwoDigits(datetime.getHours()%12) + ':' +
        forceTwoDigits(datetime.getMinutes()) + ':' +
        forceTwoDigits(datetime.getSeconds()) + ' ' +
        (datetime.getHours() > 12 ? 'pm' : 'am');
      return datestr;
    }
    function hashStringToHex(str) {
      let hash = 0;
      for (let i = 0; i < str.length; i++) {
        hash = str.charCodeAt(i) + ((hash << 5) - hash);
      }
      let color = '#';
      for (let i = 0; i < 3; i++) {
        let value = (hash >> (i * 8)) & 0xFF;
        color += ('00' + value.toString(16)).substr(-2);
      }
      return color;
    }
    function updateTables(data) {

      $('tr.lobby.null').detach();

      for (let f=0; f<data.length; f++) {
        let type;
        if ( data[f].status==='in-progress' ) {
          type = 'active';
        } else {
          type = 'available';
          for (let p=0; p<data[f].players.length; p++) {
            let player = data[f].players[p];
            if (player.name===username && player.id===userid) {
              type = 'pending';
            }
          }
        }

        //console.log( type, data[f] );

        let isVisible = (!data[f].isFull || data[f].userInGame);
        let hasChanged = $('span#date'+data[f]._id ).html()!==data[f].updated.toString();
        let isInTables = $('table.gamelist').has( 'tr#min' + data[f]._id ).length > 0;

        //console.log( isFull, isVisible, hasChanged, isInActive, isInPending, isInAvailable );

        if ( !isVisible ) {
          removeTableRow( data[f] );
        } else if ( !isInTables && isVisible ) {
          addTableRow( data[f], type );
        } else if ( hasChanged ) {
          updateTableRow( data[f] );
        }

      }

      for (let f=0; f<2; f++) {
        let type = ['active', 'pending', 'available'][f];
        if ( $('table#' + type + '-games').find('tr').length===1 ) {
          let table = $('table#' + type + '-games tr:last');
          table.after( '<tr class="lobby null"><th colspan="10"><div class="lobby null-container">no current games ...</div></th></tr>' );
        }
      }

      $(".lobby.play.link").unbind().click( function(event) {
        let id = event.target.id.replace( 'play', '' );
        window.location.href=('/play/' + id);
      });
      $( 'tr.lobby.min' ).unbind().click( function(event) {
        handleClickListitem(event);
      });
      $('.lobby.delete.link').unbind().click( function(event) {
        let id = event.target.id.replace( 'delete', '');
        $('#ld'+id).submit();
      })
      $('.lobby.share.link').unbind().click( function(event) {
        let id = event.target.id.replace( 'share', '' );
        let input = $('#private-code-input');
        input.val(id);
        input.select()
        document.execCommand('copy');
        msginput.val( 'Hi, come @(join my game!,' + input.val() + ')' );
        msginput.focus();
        input.val('');
      });
      $('.lobby.leave.link').unbind().click( function(event) {
        let id = event.target.id.replace( 'leave', '' );
        $('#lf'+id).submit();
      });
      $(".lobby.launch.link").unbind().click( function(event) {
        let id = event.target.id.replace( 'launch', '' );
        $('#ll'+id).submit();
      });
      $(".lobby.join.link").unbind().click( function(event) {
        let id = event.target.id.replace( 'join', '' );
        $('#jf'+id).submit();
      });
    }
    function removeTableRow(data) {
      $('tr#min'+data._id).detach();
      $('tr#max'+data._id).detach();
    }
    function updateTableRow(data) {
      $('span.current-number#' + data._id).html( data.players.length );

      let html = '';

      for (let p=0; p<data.numHumans; p++) {
        html += '<p>';
        html +=   '<span class="num">Player ' + (p+1) + ':&nbsp;&nbsp</span>';
        html +=   '<strong class="name">' + (data.players[p] ? data.players[p].name : '') + '</strong>';
        html += '</p>';
      }

      $('div.players-list#pl' + data._id).html( html );
      $('span#date' + data._id).html( data.updated );

      // update play button

    }
    function addTableRow(data, type) {

      let current = (type==='current');

      let minrow = '';

      minrow += '<tr class="lobby min" id="min' + data._id + '">';
      if (type==='active') {
        minrow += '<th>' + data.turn + ' (' + data.waitfor.name + ')</th>';
      } else {
        minrow += '<th><strong class="' + data.status + '" id="data' + data.status + '">' + data.status + '</strong></th>';
      }
      minrow +=   '<th>' + data.scenario + '</th>';
      minrow +=   '<th>';
      if (type==='active') {
        minrow +=   (data.numHumans + data.numCPUs);
      } else {
        minrow +=   '<span class="current-number" id="' + data._id + '">' + data.players.length + '</span>/';
        minrow +=   '<span class="required-number">'+ data.numHumans + '</span>';
      }
      minrow +=   '</th>';
      minrow +=   '<th><strong class="name" style="color:' + hashStringToHex(data.author) + '">' + data.author + '<strong></th>';
      minrow +=   '<th><span class="date-updated" id="date' + data._id + '">' + data.updated + '</span></th>';
      minrow += '</tr>';

      let maxrow = '';

      maxrow += '<tr class="lobby max" id="max' + data._id + '">';
      maxrow +=   '<th colspan="6">';
      maxrow +=     '<div class="lobby max-container">';
      maxrow +=       '<div class="lobby max info">';
      maxrow +=         '<p class="victory-points-info">';
      maxrow +=           '<strong>' + data.VPs + '&nbsp;';
      maxrow +=           'Victory Points</strong> required for victory';
      maxrow +=         '</p>';
      maxrow +=         '<div class="players-list" id="pl' + data._id + '">';
      for (let p=0; p<data.numHumans; p++) {
        let name = ( data.players[p] ? data.players[p].name : '' );
        let color = hashStringToHex(name);
        maxrow +=         '<p>';
        maxrow +=           '<span class="num">Player ' + (p+1) + ':&nbsp;&nbsp</span>';
        maxrow +=           '<strong class="name" style="color:' + color + '">' + name + '</strong>';
        maxrow +=         '</p>';
      }
      maxrow +=         '</div>';
      maxrow +=       '</div>';
      maxrow +=       '<div class="lobby max button">';
      switch (type) {
        case 'active':
          maxrow +=     '<button class="lobby play link" id="play' + data._id + '">Play</button>';
          break;
        case 'pending':
          if (data.author===username) {
            maxrow +=   '<button class="lobby delete link" id="delete' + data._id + '">Delete</button>';
            maxrow +=   '<form action="/delete" method="POST" id="ld' + data._id + '" class="hidden-form">';
            maxrow +=     '<input type="hidden" name="gameid" value="' + data._id + '" />';
            maxrow +=   '</form>';
          } else {
            maxrow +=   '<button class="lobby leave link" id="leave' + data._id + '">Leave</button>';
            maxrow +=   '<form action="/leave" method="POST" id="lf' + data._id + '" class="hidden-form">';
            maxrow +=   '<input type="hidden" name="gameid" value="' + data._id + '" />';
            maxrow +=   '</form>';
          }
          maxrow +=     '<button class="lobby share link" id="share' + data._id + '">Share</button>';
          maxrow +=     '<button class="lobby launch link" id="launch'  + data._id + '" ' + (data.players.length===data.numHumans ? '' : 'disabled') + '>Launch</button>';
          maxrow +=     '<form action="/launch" method="POST" id="ll' + data._id + '" class="hidden-form">';
          maxrow +=       '<input type="hidden" name="gameid" value="' + data._id + '" />';
          maxrow +=     '</form>';
          break;
        case 'available':
          maxrow +=     '<button class="lobby join link" id="join' + data._id + '">Join</button>';
          maxrow +=     '<form action="/join" method="POST" id="jf' + data._id + '" class="hidden-form">';
          maxrow +=       '<input type="hidden" name="gameid" value="' + data._id + '" />';
          maxrow +=     '</form>';
          break;
      }
      maxrow +=       '</div>';
      maxrow +=     '</div>';
      maxrow +=   '</th>';
      maxrow += '</tr>';

      let table = $('table#' + type + '-games tr:last');

      table.after( maxrow );
      table.after( minrow );

    }
    function handleClickListitem(event) {

      id = event.target.parentNode.id || event.target.parentNode.parentNode.id;

      min = $( '#' + id.replace(/max/, 'min') );
      if (id !== expandedid) {
        min.children()
          .css( 'border-bottom-style', 'none' )
          .css( 'background-color', '#eee' );
      } else {
        min.children()
          .css( 'border-bottom-style', 'solid' )
          .css( 'background-color', '#ddd' );
      }
      min.siblings().filter('.min').children()
        .css( 'border-bottom-style', 'solid' )
        .css( 'background-color', '#ddd' );

      max =  $( '#' + id.replace(/min/, 'max') );
      if (id !== expandedid) {
        max.css( 'display', 'table-row' )
          .children().css( 'background-color', '#eee' );
      } else {
        max.css( 'display', 'none' )
          .children().css( 'background-color', '#ddd' );
      }
      max.siblings().filter( '.max' )
        .css( 'display', 'none' )
        .children().css( 'background-color', '#ddd' );

      if (id.indexOf('min') > -1) {
        expandedid = (id !== expandedid ? id : null);
      }

    }
    function windowResizeWide() {
      $('.lobby.content').css('flex-flow',  'row-reverse nowrap');
      $('.frame#messages').css('border-left-width', '2px');
      $('button.switch-view').prop('id', 'wide').html('Switch to wide view');
    };
    function windowResizeNarr() {
      $('.lobby.content').css('flex-flow',  'column-reverse nowrap');
      $('.frame#messages').css('border-left-width', '0px');
      $('button.switch-view').prop('id', 'narrow').html('Switch to narrow view');
    };
    function checkForMobile() {
      var check = false;
      (function(a){if(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0,4))) check = true;})(navigator.userAgent||navigator.vendor||window.opera);
      return check;
    };
    function forceSwitchView() {
      let domobj = $('button.switch-view');
      if (domobj.prop('id') === 'wide') {
        maxWidthForNarrView = Math.max( maxWidthForNarrView, $(window).width()*1.11 );
        windowResizeNarr();
      } else if (domobj.prop('id') === 'narrow') {
        minWidthForWideView = Math.min( minWidthForWideView, $(window).width()*0.9 );
        windowResizeWide();
      }
      //console.log( minWidthForWideView, maxWidthForNarrView );
      //console.log( domobj.prop('id') );
    };
    function addChatMessage(data, options={}) {
      let msgText = '<li class="';
      msgText += 'message ' + (options.class || '') + ' ' + data.username + '">';
      if (!options.omitTimestamp) {
        msgText += '<span class="timestamp">' + getTimeStr() + '</span>';
      }
      if (!options.omitUsername) {
        let color = hashStringToHex(data.username);
        msgText += '<strong class="username" style="color:' + color + '">' + data.username + '</strong>&nbsp;';
      }
      msgText += '<span class="body ' + (data.username===username ? 'self' : '') + '">' + escapeMessageBody(data.body) + '</span></li>';
      $('ul.messages').append( msgText );
      let messagesDiv = $('div.messages.public');
      messagesDiv.scrollTop( messagesDiv[0].scrollHeight );
    }
    function escapeMessageBody(str) {

      let repl;
      const reg = (str.match(/@\(.*?\)/g) || []);

      for (let r=0; r<reg.length; r++) {

        const regr= reg[r].substring( 2, reg[r].length-1 );
        const split = regr.split(',');
        repl = '<strong style="color:'

        switch (split.length) {
          case 1:
            repl += hashStringToHex(split[0]) + '">';
            repl += regr;
            break;
          case 2:
            repl += hashStringToHex(split[1]) + '">';
            if ( split[1].length===24 && split[1].match(/^[a-z0-9]+$/i) ) { // i.e. it's a /join link
              repl += '<a class="chat-link" href="javascript:void(0);" onclick="javascript:$(`#private-code-input`).val(`' + split[1] + '`);">' + split[0] + '</a>';
            } else {
              repl += hashStringToHex(split[0]) + '">';
              repl += split[0];
            }
            break;
          default:
            repl += split.join(' ');
            break;
        }

        repl += '</strong>';
        str = str.replace( reg[r], repl );

      }
      return str;
    }
    function updateCurrentlyOnline(num) {
      $('span.currently-online').html(num);
    }
    function sendChatMessage() {
      var message = msginput.val();
      message = cleanInput(message);
      if (message) {
        msginput.val('');
        addChatMessage({ body:message, username:username });
        socket.emit('new message', message);
      }
    }
    function cleanInput (input) {
      // prevent markup injections and such
      return $('<div/>').text(input).html();
    }

    // GLOBALS
    var username, userid, expandedid, msginput, ngsbutton, ngsdiv,
      minWidthForWideView = 1200,
      maxWidthForNarrView = 1000,
      socket = io();

    // DOCUMENT READY
    $( function() {

      msginput = $('input.messages');
      msginput.focus();

      ngsbutton = $('button#new-game-show');
      ngsdiv = $('div.new-game#show-hide');
      //ngsdiv.hide();
      ngsbutton.click( function(event) {
        event.preventDefault();
        ngsdiv.toggle();
        if (ngsdiv.css( 'display' )==='none') {
          ngsbutton.html( 'Host' );
        } else {
          ngsbutton.html( 'Cancel' );
        }
      });

      /*if ($(window).width() < maxWidthForNarrView || checkForMobile()) forceSwitchView();
      window.addEventListener( 'resize', function() {
        if ($(window).width() < minWidthForWideView) { // safari doesn't catch this?
          windowResizeNarr();
        } else if ($(window).width() > maxWidthForNarrView) {
          windowResizeWide();
        }
      });*/

      // Window events

      $(window).keydown( function(event) {
        if (event.which === 13) { // ENTER
          if (msginput.is(':focus')) {
            sendChatMessage();
          }
        }
      });

      // Socket events

      socket.on('on connection', function(data) {
        username = data.username;
        userid = data.userid;
        updateCurrentlyOnline(data.numUsers);
        updateTables(data.games);
      });
      socket.on('new connection', function(data) {
        //$('#put-shit-here').html( JSON.stringify(data.games) );
        updateTables(data.games);
        updateCurrentlyOnline(data.numUsers);
        addChatMessage({ body:'has connected!', username:data.username });
      });
      socket.on('end connection', function(data) {
        updateCurrentlyOnline(data.numUsers);
        addChatMessage({ body:'has disconnected', username:data.username });
      });
      socket.on('new message', function(data) {
        addChatMessage({ body:data.message, username:data.username });
      })

    });

  </script>
</body>
</html>
