<!-- views/lobby.ejs -->

<!DOCTYPE html>
<html>
<head>
  <title>CatOnline &mdash; Lobby</title>
  <link rel="stylesheet" href="/styles/style.css">
  <link rel="SHORTCUT ICON" href="images/favicon.ico" />
  <link rel="icon" href="images/favicon.ico" type="image/ico" />
</head>

<body>

  <div class="lobby content">

    <div class="frame" id="messages">
      <%- include( 'messages.ejs' ) %>
    </div>

    <div class="frame" id="lists">
      <div class="lobby container" id="host-new-game">
        <form>

          <button type="button" class="show-hide">Host new game</button>
          <br />

          <div style="display:none;">
            <div class="label">New game settings</div>
            <div class="config-and-button-container">
              <div class="config-container">
                <div class="subcontainer dropdowns">
                  <% for (var key in config.strings) {
                    value = config.strings[key]; %>
                    <span class="setting">
                      <%= value.label %>:&nbsp;
                      <select name="<%= key %>" >
                        <% for (i=0; i< value.options.length; i++) {
                          if (value.options[i] === value.default) { %>
                            <option value="<%= value.options[i] %>" selected="selected">
                          <% } else { %>
                            <option value="<%= value.options[i] %>">
                          <% } %>
                            <%= value.options[i] %>
                          </option>
                        <% } %>
                      </select>
                    </span>
                  <% }  %>
                </div>
                <div class="subcontainer ranges">
                  <% for (var key in config.ints) {
                    value = config.ints[key]; %>
                    <span class="setting">
                      <%= value.label %>:&nbsp;
                      <input type="number" step="1" pattern="\d+" min="<%=value.min%>" max="<%=value.max%>" value="<%=value.default%>" name="<%= key %>" />
                    </span>
                  <% } %>
                </div>
                <div class="subcontainer checkboxes">
                  <% for (var key in config.bools) {
                    value = config.bools[key]; %>
                    <span class="setting">
                      <%= value.label %>:&nbsp;
                      <input type="checkbox" name="<%= key %>" <%= value.default ? 'checked' : '' %>>
                    </span>
                  <% } %>
                </div>
              </div>
              <button type="button" class="lobby post" name="new-game">New game</button>
            </div>
          </div>
        </form>

      </div>
      <%
      let tables=['active','pending','available'];
      for (let t=0; t< tables.length; t++) { %>
        <div class="lobby container" id="<%= tables[t] %>-games-cont">
          <p>In-progress games</p>
          <table class="lobby gamelist <%= tables[t] %>" id="<%= tables[t] %>-games">
            <tr class="lobby header">
              <th class="turn">Turn</th>
              <th class="status">Status</th>
              <th class="scenario">Scenario</th>
              <th class="players">Players</th>
              <th class="humans">Humans</th>
              <th class="owner">Owner</th>
              <th class="modified">Modified</th>
            </tr>
          </table>
        </div>
      <% } %>
      <div class="lobby container" id="private-code">
        <p>Enter a private code</p>
        <span>
          <form>
            <input type="text" name="gameid" pattern=".{24}" id="private-code-input" required>
            <button type="button" class="lobby post" name="join">Join</button>
          </form>
        </span>
      </div>
    </div>

  </div>

  <%- include( 'banner.ejs' ) %>

  <script src='/socket.io/socket.io.js'> </script>
  <script src='http://code.jquery.com/jquery-latest.min.js'> </script>
  <script src='/resources/core.js'> </script>
  <script src='/resources/messages.js'> </script>
  <!--<script src='/resources/lobby.js'> </script>-->

  <script>
    // functionality specific to /lobby

    // FUNCTIONS
    function checkIfUserInGame( user, game ) {
      for (let p=0; p<game.players.length; p++) {
        if ( usersCheckEqual(game.players[p], user) ) {
          return true;
        }
      }
      return false;
    }
    function sendLobbyAction(data) {
      if (data.action==='new-game') toggleNewGame();
      socket.emit('lobby action', data);
    }
    function toggleNewGame() {
      let button = $('button.show-hide');
      button.html( button.html()==='Host new game' ? 'Cancel' : 'Host new game' )
        .siblings('div').each( function(key,value) { $(value).toggle(); });
    }
    function bindButtons() {
      $( 'button.show-hide' ).unbind().click( function(event) {
        toggleNewGame();
      });
      $( 'button.post' ).unbind().click( function(event) {
        let data = { action:$(event.target).prop( 'name' ), args:{} };
        let form = $(event.target).closest( 'form' );
        form.find( 'input' ).each( function(key,value) {
          let input = $(value);
          if (input.is( 'input[type=checkbox]' )) {
            data.args[ input.prop('name') ] = input.is(':checked');
          } else {
            data.args[ input.prop('name') ] = input.val(); // will need to parseInt() on server
          }
        });
        form.find( 'select' ).each( function(key,value) {
          let select = $(value);
          data.args[ select.prop('name') ] = select.find(':selected').text().trim();
        });
        sendLobbyAction(data);
      });
    }
    function bindTableRows() {
      $( 'tr.lobby.min' ).unbind().click( function(event) {

          // default everything to collapsed view
          $('tr.min').children()
            .css( 'border-bottom-style', 'solid' )
            .css( 'background-color', '#ddd' );
          $('tr.max').css( 'display', 'none' )

          // find the stuff we clicked on
          id = $(event.target).closest('tr').prop('id');

          // and expand it if it's collapsed
          if (id !== expandedid)
            expandTableRow(id);

          // track which one is currently expanded
          expandedid = (id !== expandedid ? id : null)

      });
    }
    function outputGameMinRowString( data, type ) {
      console.log(data);
      let str = '';

      str +=   '<th><strong>' + data.turn + '</strong> (' + ( data.waiting.length ? data.waiting.map(u=>formatUsername(u)).join(', ') : 'N/A' ) + ') </th>';
      str +=   '<th><strong class="' + data.status + '">' + data.status + '</strong></th>';
      str +=   '<th>' + data.settings.scenario + '</th>';
      str +=   '<th>';
      str +=     '<span class="players">' + (data.settings.numHumans + data.settings.numCPUs) + '</span>';
      str +=     '<span class="humans">' + data.players.length + '/' + data.settings.numHumans + '</span>';
      str +=   '</th>';
      str +=   '<th>' + formatUsername( data.author ) + '</th>';
      str +=   '<th><span class="date-updated">' + data.updated + '</span></th>';
      str += '</tr>';

      return str;
    }
    function outputGameMaxRowString( data, type ) {
      let str = '', canDelete = usersCheckEqual(data.author, user);

      str += '<th colspan="6">';
      str +=   '<div class="lobby max-container">';
      str +=     '<div class="lobby max info">';
      str +=       '<p class="victory-points-info">';
      str +=         '<strong>' + data.VPs + '&nbsp;';
      str +=         'Victory Points</strong> required for victory';
      str +=       '</p>';
      str +=       '<div class="players-list">';
      for (let p=0; p<data.numHumans; p++) {
        str +=       '<p>';
        str +=         '<span class="num">Player ' + (p+1) + ':&nbsp;&nbsp</span>';
        str +=         formatUsername( data.players[p] );
        str +=       '</p>';
      }
      str +=       '</div>';
      str +=     '</div>';
      str +=     '<form class="post-buttons">';
      str +=       '<input type="hidden" name="gameid" value="' + data.id + '" />';
      switch (type) {
        case 'active':
          str += '<button type="button" class="lobby post" name="delete-game" '+(canDelete?'':'disabled')+'>Delete</button>';
          str +=   '<button type="button" class="lobby post" name="play">'+(checkIfUserInGame(user,data)?'Play':'Watch')+'</button>';
          break;
        case 'pending':
          str += '<button type="button" class="lobby post" name="delete-game" '+(canDelete?'':'disabled')+'>Delete</button>';
          str +=   '<button type="button" class="lobby post" name="leave">Leave</button>';
          str +=   '<button type="button" class="lobby post" name="share">Share</button>';
          str +=   '<button type="button" class="lobby post" name="launch" '+(data.isFull?'':'disabled')+'>Launch</button>';
          break;
        case 'available':
          if (user.isSuperAdmin)
            str += '<button type="button" class="lobby post" name="delete-game"">Delete</button>';
          if (!data.isFull)
            str += '<button type="button" class="lobby post" name="join">Join</button>';
          break;
      }
      str +=     '</form>';
      str +=   '</div>';
      str += '</th>';

      return str;
    }
    function checkIfEmptyTables() {

      // check if we need to add the "no current games ..." displays
      for (let i=0; i<3; i++) {
        let type = ['active', 'available', 'pending'][i];
        if ( $('#' + type + '-games').find('tr').length===1 ) {
          let table = $('#' + type + '-games tr:last');
          table.after( '<tr class="lobby null"><th colspan="10"><div class="lobby null-container">no current games ...</div></th></tr>' );
        }
      }

    }
    function updateTables(games) {
      /***
        take incoming data from socket connection and use it to populate our lobby tables
        ***/

      // remove the "no current games ..." displays
      $('tr.lobby.null').detach();

      // iterate over each incoming user
      for (let g=0; g<games.length; g++) {
        // and add it to the table if it's not there
        if (!$('table').has( '#' + games[g].id ).length)
          addTableRow( games[g] );
      }


      bindButtons();
      bindTableRows();
      checkIfEmptyTables();

      // open up the hashed object
      /*if (window.location.hash.length) {
        let id = window.location.hash.replace(/#/, 'min');
        handleClickListitem(null,id);
        window.location.hash = '';
      }*/
    }
    function getTableType(data) {
      // decide which table a bit of game data belongs in
      // function name is a bit misleading b/c it actually returns
      // a $('tr') object
      let type;
      if ( data.status==='in-progress' ) {
        return 'active';
      } else {
        for (let p=0; p<data.players.length; p++) {
          let player = data.players[p];
          console.log(data.players);
          if ( usersCheckEqual(player, user) ) {
            return 'pending';
          }
        }
        return 'available';
      }
    }
    function removeTableRow(data) {
      $('#'+data.id).detach();
      $('#__'+data.id).detach();
      expandedid = null;
    }
    function updateTableRow(data) {

      if (getTableType(data)===$('#'+data.id).closest('table').prop('class').replace(/\-games/,'')) {
        $('#' + data.id).html( outputGameMinRowString(data,type) );
        $('#__'+data.id).html( outputGameMaxRowString(data,type) );
      } else {
        $('#' + data.id).detach();
        $('#__'+data.id).detach();
        addTableRow(data);
      }

    }
    function addTableRow(data) {

      let row, type = getTableType(data);
      let table = $('#'+type+'-games tr:last');

      row  = '<tr class="lobby max" id="__' + data.id + '">';
      row +=   outputGameMaxRowString(data, type);
      row += '</tr>';
      table.after( row );

      row  = '<tr class="lobby min" id="' + data.id + '">';
      row +=   outputGameMinRowString(data, type);
      row += '</tr>';
      table.after( row );

    }
    function expandTableRow(id) {
      $( '#'+id ).children()
        .css( 'border-bottom-style', 'none' )
        .css( 'background-color', '#eee' );
      $( '#__'+id ).css( 'display', 'table-row' )
        .children().css( 'background-color', '#eee' );
    }

    // GLOBALS
    var expandedid;

    // ON READY
    $( function() {

      // Socket events
      socket.on('on connection', function(data) {
        user = data.user; // declared as GLOBAL in messages.js
        updateTables(data.games);
      });
      socket.on('new connection', function(data) {
        //updateTables(data.games);
      });
      socket.on('lobby callback', function(data) {
        console.log(data);
        $( 'tr.lobby.null' ).detach();
        switch (data.action) {
          case ('ERROR'): break;
          case ('ADD'):
            for (let u=0; u<data.users.length; u++) {
              //
            }
            for (let g=0; g<data.games.length; g++) {
              addTableRow( data.games[g] );
            }
            break;
          case ('UPDATE'):
            for (let u=0; u<data.users.length; u++) {
              //
            }
            for (let g=0; g<data.games.length; g++) {
              updateTableRow( data.games[g] );
            }
            break;
          case ('REMOVE'):
            for (let u=0; u<data.users.length; u++) {
              //
            }
            for (let g=0; g<data.games.length; g++) {
              removeTableRow( data.games[g] );
            }
            break;
          case ('SHARE'):
            break;
          case ('PLAY'):
            window.location.href = '/play/'+data.url;
            break;
          default:
            data = {
              action  : 'ERROR',
              request : 'MALFORMED SERVER RESPONSE',
              message : '<br />'+JSON.stringify(data)
            };
        }
        checkIfEmptyTables();
        bindTableRows();
        bindButtons();
        //$('input[type=checkbox]').prop( 'checked', false );
        //logToConsole(data);
      });


    });
  </script>

</body>
</html>
