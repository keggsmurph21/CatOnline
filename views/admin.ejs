<!-- views/admin.ejs -->

<!DOCTYPE html>
<html>
<head>
  <title>CatOnline &mdash; Lobby</title>
  <link rel="stylesheet" href="/styles/style.css">
  <link rel="SHORTCUT ICON" href="images/favicon.ico" />
  <link rel="icon" href="images/favicon.ico" type="image/ico" />
</head>

<body>

  <div class="admin content">
    <div class="admin frame">

      <div class="admin container" id="user-info">
        <p>Privileges: <strong><%= user.isSuperAdmin ? 'superadmin' : 'admin' %></strong></p>
        <% if (message.length) { %>
          <p class="admin alert"><%= message %></p>
        <% } %>
      </div>

      <form class="admin container" id="users-cont" method="post" action="/admin/batch/users">
        <p>Users</p>
        <table class="admin userlist">
          <tr class="admin header">
            <th>select</th>
            <th>username</th>
            <th>author</th>
            <th>player</th>
            <th>isSuperAdmin</th>
            <th>isAdmin</th>
            <th>isMuted</th>
            <th>flair</th>
            <th>password reset</th>
          </tr>
        </table>
        <span class="batch user">
          <p>Batch actions:</p>
          <span>
            <% if (user.isSuperAdmin) { %>
              <button name="action" value="delete-users" type="submit">Delete users</button>
              <button name="action" value="delete-authored" type="submit">Delete authored games</button>
            <% } %>
            <button name="action" value="kick" type="submit">Kick from all games</button>
          </span>
        </span>
      </form>

      <form class="admin container" id="games-cont" method="post" action="/admin/batch/games">
        <p>Games</p>
        <table class="admin gamelist">
          <tr class="admin header">
            <th>select</th>
            <th>status</th>
            <th>turn</th>
            <th>public</th>
            <th>scenario</th>
            <th>players</th>
            <th>VPs</th>
            <th>updated</th>
          </tr>
        </table>
        <span class="batch game">
          <p>Batch actions:</p>
          <span>
            <% if (user.isSuperAdmin) { %>
              <button name="action" value="delete-games" type="submit">Delete games</button>
            <% } %>
            <button name="action" value="kick" type="submit">Kick users</button>
            <button name="action" value="make-public" type="submit">Make public</button>
            <button name="action" value="make-private" type="submit">Make private</button>
          </span>
        </span>
      </form>

    </div>
  </div>

  <%- include( 'banner.ejs' ) %>

  <script src='/socket.io/socket.io.js'> </script>
  <script src='http://code.jquery.com/jquery-latest.min.js'> </script>
  <script src='/resources/core.js'> </script>
  <!--<script src='/resources/admin.js'> </script>-->
  <script>
  // FUNCTIONS
  function outputPlayersListSpanString(data) {
    let str = '', playerCount = 0, kickable = data.status!=='in-progress', kickCount = 0;

    str += ( kickable ? '<form class="admin" id="kick-form-' + data.id + '" method="post" action="admin/kick">' : '' );
    str += ( kickable ? '<input type="hidden" name="gameid" value="' + data.id + '" />' : '' );

    for (let p=0; p< data.numHumans; p++) {
      if (playerCount) str += '<strong>, </strong>';
      if (data.players[p]) {
        if ( kickable && (!data.players[p].isAdmin || user.isSuperAdmin) && !usersCheckEqual(data.players[p],data.author) ) {
          str += '<input type="checkbox" name="user' + data.players[p].id + '" />';
          kickCount += 1;
        }
        if ( usersCheckEqual(data.players[p], data.author) ) {
          str += '<span class="is-owner">';
          str += formatUsername(data.players[p]);
          str += '</span>';
        } else {
          str += formatUsername(data.players[p]);
        }
      } else {
        str += '<span class="empty">?</span>';
      }
      playerCount += 1;
    }
    for (let p=0; p< data.numCPUs; p++) {
      if (playerCount) str += ', ';
      str += '<span class="cpu">CPU</span>';
      playerCount += 1;
    }

    str += ( kickable && kickCount ? '&nbsp;<button type="submit">Kick</button>' : '' );
    str += ( kickable ? '</form>' : '' );

    return str;
  }
  function outputUserRowString(data) {
    let str = '';

    let exceededAsAuthor = data.activeGamesAsAuthor > data.maxActiveGamesAsAuthor && !data.isAdmin;
    let exceededAsPlayer = data.activeGamesAsPlayer > data.maxActiveGamesAsPlayer && !data.isAdmin;

    str += '<th><input type="checkbox" name="user' + data.id + '" /></th>';
    str += '<th>' + formatUsername(data) + '</th>';
    str += '<th>';
    str +=   (exceededAsAuthor ? '<strong class="false">' : '') ;
    str +=   data.activeGamesAsAuthor + '/';
    str +=   (data.isAdmin ? '&#x221e;' : data.maxActiveGamesAsAuthor);
    str +=   (exceededAsAuthor ? '</strong>' : '') ;
    str += '</th>';
    str += '<th>';
    str +=   (exceededAsPlayer ? '<strong class="false">' : '') ;
    str +=   data.activeGamesAsPlayer + '/';
    str +=   (data.isAdmin ? '&#x221e;' : data.maxActiveGamesAsPlayer);
    str +=   (exceededAsPlayer ? '</strong>' : '') ;
    str += '</th>';
    str += '<th><strong class="isSuperAdmin ' + data.isSuperAdmin + '">' + data.isSuperAdmin + '</strong></th>';
    str += '<th>';
    str +=   '<strong class="isAdmin ' + data.isAdmin + '">' + data.isAdmin + '</strong>';
    if (!data.isSuperAdmin && user.isSuperAdmin) {
      // only superadmins can pro-/de-mote nonsuperadmins
      if (data.isAdmin) {
        str += '<form class="admin" method="post" action="/admin/demote">';
        str +=   '<input type="hidden" name="userid" value="' + data.id + '" />';
        str +=   '&nbsp;<button type="submit" class="admin">demote</button>';
        str += '</form>';
      } else {
        str += '<form class="admin" method="post" action="/admin/promote">';
        str +=   '<input type="hidden" name="userid" value="' + data.id + '" />';
        str +=   '&nbsp;<button type="submit" class="admin">promote</button>';
        str += '</form>';
      }
    }
    str += '</th>';
    str += '<th>';
    str +=   '<strong class="isMuted ' + data.isMuted + '">' + data.isMuted + '</strong>';
    if (!data.isSuperAdmin && (user.isSuperAdmin || !data.isAdmin)) {
      // superadmins can un-/mute nonsuperadmins, admins can un-/mute peons
      if (data.isMuted) {
        str += '<form class="admin" method="post" action="/admin/unmute">';
        str +=   '<input type="hidden" name="userid" value="' + data.id + '" />';
        str +=   '&nbsp;<button type="submit" class="admin">unmute</button>';
        str += '</form>';
      } else {
        str += '<form class="admin" method="post" action="/admin/mute">';
        str +=   '<input type="hidden" name="userid" value="' + data.id + '" />';
        str +=   '&nbsp;<button type="submit" class="admin">mute</button>';
        str += '</form>';
      }
    }
    str += '</th>';
    str += '<th>';
    if ( (!data.isSuperAdmin && (user.isSuperAdmin || !data.isAdmin)) || usersCheckEqual(user,data) ) {
      // superadmins can nonsuperadmin flair, admins can change peon flair, everyone can change their own flair
      str += '<form class="admin" method="post" action="/admin/flair">';
      str +=   '<input class="lr" type="text" name="flair" style="width:8ch;" maxlength="8" value="' + data.flair + '" />';
      str +=   '<input type="hidden" name="userid" value="' + data.id + '" />';
      str +=   '&nbsp;<button type="submit" class="admin">set</button>';
      str += '</form>';
    }
    str += '</th>';
    str += '<th><form class="admin" method="post" action="/admin/toggle-password-reset"><strong class="';
    if ( data.allowResetPassword ) {
      str += 'true">enabled';
    } else {
      str += 'false">disabled';
    }
    str += '<button type="submit">toggle</button></strong></form></th>';

    return str;
  }
  function outputGameRowString(data) {
    let str = '';

    str += '<th><input type="checkbox" name="game' + data.id + '"></th>';
    str += '<th><strong class="status ' + data.status + '">' + data.status + '</strong></th>';
    str += '<th><strong class="' + (data.turn>0) + '">' + data.turn + '</strong></th>';
    str += '<th><strong class="' + data.public + '">' + data.public + '</strong></th>';
    str += '<th><strong>' + data.scenario + '</strong></th>';
    str += '<th><span class="players-list">' + outputPlayersListSpanString(data) + '</span></th>';
    str += '<th><strong>' + data.VPs + '</strong></th>';
    str += '<th><span class="date">' + data.updated + '</span></th>';

    return str;
  }
  function updateTables(games, users) {
    /***
      take incoming data from a socket event and use it to populate our lobby tables
      ***/

    // remove the "no current games ..." displays
    $('tr.admin.null').detach();

    // get a list of ids, eventually remove ones we don't match
    let ids = [];

    // iterate over each incoming user
    for (let u=0; u<users.length; u++) {

      ids.push( users[u].id );
      let hasChanged = (
        $('#' + users[u].id + ' span.isSuperAdmin').html()!==users[u].isSuperAdmin.toString() ||
        $('#' + users[u].id + ' span.isAdmin').html()!==users[u].isAdmin.toString() ||
        $('#' + users[u].id + ' span.isMuted').html()!==users[u].isMuted.toString() );
      let isInTables = $('table.userlist').has( '#' + users[u].id ).length > 0;

      // decide if we need to add, update, or nothing
      if ( !isInTables ) {
        addUserTableRow( users[u] );
      } else if ( hasChanged ) {
        updateUserTableRow( users[u] );
      }

    }

    // iterate over each incoming game
    for (let g=0; g<games.length; g++) {

      console.log(games[g].id);

      ids.push( games[g].id );
      let hasChanged = $('#' + games[g].id + ' span.date' ).html()!==games[g].updated.toString();
      let isInTables = $('table.gamelist').has( '#' + games[g].id ).length > 0;

      // decide if we need to add, update, or nothing
      if ( !isInTables ) {
        addGameTableRow( games[g] );
      } else if ( hasChanged ) {
        updateGameTableRow( games[g] );
      }

    }

    // now remove the ones that were deleted with /delete
    let unmatchedids = [];
    $('table.gamelist').find('.game').each( function(k,v) {
      let id = $(v).prop('id');
      if (ids.indexOf(id)<0) unmatchedids.push( id );
    });
    for (let i=0; i<unmatchedids.length; i++) {
      $('#'+unmatchedids[i]).detach();
    }

    // check if we need to add the "no current games ..." displays
    for (let i=0; i<2; i++) {
      let type = ['game', 'user'][i];
      if ( $('table.' + type + 'list').find('tr').length===1 ) {
        let table = $('table.' + type + 'list tr:last');
        table.after( '<tr class="admin null"><th colspan="10"><div class="admin null-container">no current ' + type + 's ...</div></th></tr>' );
      }
    }
    /*
      // add listeners to things that live inside the tables
      $(".lobby.play.link").unbind().click( function(event) {
        let id = event.target.id.replace( 'play', '' );
        window.location.href=('/play/' + id); // GET
      });
      $( 'tr.lobby.min' ).unbind().click( function(event) {
        handleClickListitem(event);
      });
      $('.lobby.delete.link').unbind().click( function(event) {
        let id = event.target.id.replace( 'delete', '');
        $('#ld'+id).submit(); // POST
      })
      $('.lobby.share.link').unbind().click( function(event) {
        let id = event.target.id.replace( 'share', '' );
        let input = $('#private-code-input');
        input.val(id);
        input.select()
        document.execCommand('copy');
        msginput.val( 'Hi, come @(join my game!,' + input.val() + ')' );
        msginput.focus();
        input.val('');
      });
      $('.lobby.leave.link').unbind().click( function(event) {
        let id = event.target.id.replace( 'leave', '' );
        $('#lf'+id).submit(); // POST
      });
      $(".lobby.launch.link").unbind().click( function(event) {
        let id = event.target.id.replace( 'launch', '' );
        $('#ll'+id).submit(); // POST
      });
      $(".lobby.join.link").unbind().click( function(event) {
        let id = event.target.id.replace( 'join', '' );
        $('#jf'+id).submit(); // POST
      });*/

  }
  function updateUserTableRow(data) {

    $('#' + data.id).html( outputUserRowString(data) );

  }
  function updateGameTableRow(data) {

    $('#' + data.id).html( outputGameRowString(data) );

  }
  function addUserTableRow(data) {

    let row = ''
    row += '<tr class="admin user" id="' + data.id + '" title="' + data.id + '">';
    row +=   outputUserRowString(data);
    row += '</tr>';

    $('table.userlist tr:last').after( row );

  }
  function addGameTableRow(data) {

    let row = '';
    row += '<tr class="admin game" id="' + data.id + '" title="' + data.id + '">';
    row +=   outputGameRowString(data);
    row += '</tr>';

    $('table.gamelist tr:last').after( row );

  }

  // GLOBALS
  var user, socket = io();

  // ON READY
  $( function() {

    // Socket events
    socket.on('on connection', function(data) {
      user = data.user;
      updateTables(data.games, data.users);
    });
    socket.on('new connection', function(data) {
      updateTables(data.games, data.users);
    });

  });
  </script>

</body>
</html>
