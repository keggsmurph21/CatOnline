#!/usr/bin/env node
/*
 * /scripts/do
 *
 * Kevin Murphy
 * 29 March 2018
 *
 * Reads a list of commands from standard input and executes them in order.
*/

const argv   = process.argv.slice(2);
const chalk  = require( 'chalk' );
const exec   = require( 'child_process' ).exec;
const fs     = require( 'fs' );
const read   = require( 'readline' );

const FUNCS  = require( '../app/funcs' );
const GAMES  = require( '../tests/example/games' );
const LOGIC  = require( '../app/logic/logic' );
const STATES = require( '../app/logic/graph/graph' );
const USERS  = require( '../tests/example/users' );

const error  = function(e) {
  if (e instanceof DoCustomError) {
    console.log(chalk.red(e.message));
  } else if (e instanceof EdgeArgumentError) {
    console.log(chalk.red(`Invalid argument: ${e.message} (expected a ${e.type})`));
  } else if (e instanceof CatonlineError) {
    console.log(chalk.red(e.message));
  } else {
    throw e;
  }
}
require('../app/errors');

class DoError extends UserInputError {
  constructor(message) {
    super(message);
    this.name = 'DoError';
  }
}
class DoArgumentError extends DoError {
  constructor(action, args) {
    super( `Invalid argument for ${action}.` );
    this.name = 'DoArgumentError';
  }
}
class DoCustomError extends DoError {
  constructor(suite, message) {
    super(message);
    this.name = 'DoCustomError for '+suite;
  }
}



var game=null, user=null, suite='default', quiet=false;

function getPlayerStringByID(id) {
  let player = game.state.players[id];
  return 'player '+id+': '+player.lobbyData.name;
}

function loadGame(id=0) {
  return Object.assign({}, GAMES[id]);
}

function loadUser(id=0) {
  var obj = Object.assign({}, USERS[id]);
  obj.id = obj._id['$oid'];
  return obj;
}

function parseInput(line, callback=()=>{}) {

  try {

    let words = line.split(' '),
      command = words[0],
      args    = words.slice(1);

    if (command[0] === '#') // comment
      return

    if (!quiet)
      console.log(chalk.green(' >> '+line));


    switch (command) {

      case ('do'):
        let p = args[0];
        let edge = args[2]; // undefined if not enough args given

        switch (args[1]) {

          case ('exec'):
            args = LOGIC.validate(game, p, edge, args.slice(3));
            LOGIC.execute(game, p, edge, args);
            break;

          case ('force'):
            args = args.slice(3).map( (a) => { parseInt(a); });
            if (game.state.players[p].adjacents.indexOf(edge) === -1)
              throw new DoError('Player '+p+' is not adjacent to `'+edge+'`.');
            LOGIC.execute(game, p, edge, args);
            break;

          default:
            throw new DoArgumentError('do', args);
        }
        break;

      case ('get'):
        let func = function() { return ''; };
        switch (args[0]) {
          case ('all'):
            func = function(game, p) {
              return {
                vp:           game.state.players[p].publicScore+' ('+game.state.players[p].privateScore+')',
                vertex:       game.state.players[p].flags,
                adjacents:    game.state.players[p].adjacents,
                settlements:	game.state.players[p].settlements,
                cities:       game.state.players[p].cities,
                roads:	      game.state.players[p].roads,
                resources:	  game.state.players[p].resources }
            }
            break;
          case ('adj'):
          case ('adjs'):
          case ('adjacents'):
            func = (game,p) => { return game.state.players[p].adjacents; };
            break;
          case ('dc'):
          case ('dev cards'):
            func = (game,p) => {
              return {
                unplayable:game.state.players[p].unplayableDCs,
                unplayed:game.state.players[p].unplayedDCs,
                played:game.state.players[p].playedDCs };
            };
            break;
          case ('flags'):
            func = (game,p) => { return game.state.players[p].flags; };
            break;
          case ('longest'):
            func = (game, p) => { return game.state.players[p].longestRoad; }
            break;
          case ('players'):
            func = (game,p) => { return game.state.players[p]; };
            break;
          case ('res'):
          case ('resources'):
            func = function(game, p) {
              return game.state.players[p].resources;
            }
            break;
          case ('roads'):
            func = function(game, p) {
              return game.state.players[p].roads;
            }
            break;
          case ('setts'):
          case ('settlements'):
            func = function(game, p) {
              return game.state.players[p].settlements;
            }
            break;
          case ('vertex'):
            func = (game,p) => { return game.state.players[p].vertex; };
            break;
          case ('score'):
          case ('vp'):
            func = (game,p) => { return game.state.players[p].publicScore
              +' ('+game.state.players[p].privateScore+')'; }
            break;
          default:
            throw new DoArgumentError('get', args);
        }

        console.log(`${''.padEnd(8)}[turn: ${game.state.turn}]`);
        for (let p=0; p<game.state.players.length; p++) {
          console.log(`${game.state.players[p].lobbyData.name.padEnd(16)}\t`,
            JSON.stringify(func(game,p), null, 2) );
        }
        break;

      case ('check'):
        switch (args[0]) {
          case ('waiting'):
            let waiting = game.state.waiting;
            console.log('for: ', waiting.forWho.map(o=>o.name).join(', '));
            console.log('what:', waiting.forWhat);
            break;
          case ('history'):
            console.log(JSON.stringify(game.state.history, null, 3));
            break;
          case ('trade'):
            console.log(game.state.currentTrade);
            break;
          case ('robber'):
            console.log(game.board.robber);
            break;
          case ('edges'):
            const edges = STATES.edges;
            for (let edge in edges) {
              let name = edge.padEnd(24);
              let e_args = edges[edge].arguments;
              e_args = (e_args==='trade'
                ? '[ <num out> <res out> ] = [ <num in> <res in> ]'
                : e_args);
              let argstring = ((e_args && e_args.length) ? ` (${e_args})` : '');
              console.log(name+argstring);
            }
            break;
          default:
            throw new DoArgumentError('check', args);
        }
        break;

      case ('exit'):
        process.exit(0);
        break;

      case ('help'):
        console.log('Available commands:');
        console.log(' - do <player> [exec|force] <edge name> [ <edge argument> ]');
        console.log(' - get [all|adj|dc|flags|longest|players|res|roads|setts|vertex|vp]');
        console.log(' - check [waiting|history|trade|robber|edges]');
        console.log(' - exit');
        console.log(' - raise <custom error message>');
        console.log(' - read <filepath from root catonline/ directory>');
        console.log(' - set [state|board|player resources <player> [ <num> <resource> ]]');
        console.log('Try running "get adj" to see available edges in the state graph.');
        break;
      case ('raise'):
        throw new DoCustomError(suite, args.join(' '));
        break;

      case ('read'):
        if (!args.length)
          throw new DoError('Please specify a file in tests/commands/ to read from.');
        suite = args[0];
          read
            .createInterface({
              input: fs.createReadStream('tests/commands/'+args[0]),
              output: process.stdout,
              terminal: false
            })
            .on('line', parseInput);
        break;

      case ('reset'):
        game = loadGame();
        user = loadUser();
        break;

      case ('set'):

        switch (args[0]) {
          case ('state'):
            throw new NotImplementedError();
            break;
          case ('board'):
            throw new NotImplementedError();
            break;
          case ('player'):
            let player = FUNCS.parse.player(game, args[1]);

            switch (args[2]) {
              case ('resources'):
                let set = FUNCS.parse.trade(game, args.slice(3)).out;
                for (res in player.resources) {
                  player.resources[res] = (set[res] || 0);
                }
                break;
              default:
                throw new DoArgumentError('set > player', args[2]);
            }
            break;
          default:
            throw new DoArgumentError('set', args[1]);
        }
        break;

      default:
        throw new DoError('Unrecognized command: '+command);
    }
  } catch (e) {
    error(e);
  }
}

function listen(path) {

  game = loadGame();
  user = loadUser();

  read
    .createInterface({
      input: (path
        ? fs.createReadStream(path)
        : process.stdin),
      output: process.stdout,
      terminal: false
    })
    .on('line', parseInput);

}

if (require.main === module)
  listen(argv.length ? argv[0] : null);

module.exports = parseInput;
module.exports.setup = function(args) {
  game = args.g || loadGame();
  user = args.u || loadUser();
  quiet= (args.quiet===undefined ? quiet : args.quiet);
}
