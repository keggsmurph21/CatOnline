#!/usr/bin/env python3
'''
/scripts/pull

Kevin Murphy
29 March 2018

The script uses data stored in the "state graph" google sheet (see script for
exact URI) to generate javascript that will eventually be used by building the
Catonline graph of accessible game states.

usage:
    $ ./scripts/pull           (-> /config/states.js [RECOMMENDED])
 or $ ./scripts/pull -s        (-> stdout)
'''

# pip3 install requests
import argparse, csv, json, os, re, requests, sys

def get_sheet( spreadsheet, gid, export_as='tsv' ):
    '''
    Request a particular sheet from a particular google spreadsheet in a
    particular format.

    @param spreadsheet  unique identifier for the google spreadsheet file
    @param gid          unique identifier for the specific sheet in this file
    @param export_as    desired output format for the spreadsheet matrix
    @return             the formatted data
    '''

    url = 'https://spreadsheets.google.com/feeds/download/spreadsheets/' \
        + 'Export?key=%s&gid=%s&exportFormat=%s' % (spreadsheet, gid, export_as)
    printf( msg='pulling from %s' % url, priority=1 )

    # require a valid response
    try:
        res = requests.get(url)
        if res.status_code == 200:
            # format response as a matrix
            lines = res.content.decode('utf-8').split('\r\n')
            return [ line.split('\t') for line in lines ]
        else:
            printf(msg='exiting ... HTTP response %s' % res.status_code, priority=0)
    except requests.exceptions.RequestException as e:
        printf(msg='exiting ... connection error occurred', priority=0)
        printf(msg=str(e), priority=2)

    sys.exit(1)

def get_state_graph():
    '''
    Get the data.

    @out        where to write the output to, expects open file-like object
    @return     None
    '''

    # the global stuff to configure URI access
    spreadsheet = '1UlTewbihkhtMcIgH6p1RqhkqUcSufclM7UvAu6EgOcI'
    printf( msg='spreadsheet: %s' % spreadsheet, priority=3 )
    sheets = {
        'vertices'  : '235763305',
        'edges'     : '931117447' }
    printf( msg='', priority=3 ) # spacing

    # since we'll be making multiple instances of this graph,
    # we won't need all the data in each instance
    serverdata, clientdata, pythondata = [ { 'vertices':{},'edges':{} } for i in range(3) ]
    commonCols = [ 'vertices', 'edges', 'target', 'label', 'name' ]
    serverCols = commonCols + [ 'evaluate', 'execute', 'isPriority', 'arguments' ]
    clientCols = commonCols + [ 'isCancel', 'listen', 'onSuccess', 'description' ]

    # parse the vertices
    sheet = get_sheet(spreadsheet, sheets['vertices'])
    printf( msg='parsing sheet `vertices`', priority=4)
    for li, line in enumerate(sheet):
        printf( msg='%s' % '\t'.join(line), priority=5)
        if not(li):
            header = line
        else:
            for i in range(len(line)):
                col_name = header[i]
                if col_name == 'name':
                    vertex_name = replace_name( 'v', line[i] )
                    serverdata['vertices'][vertex_name] = { 'edges':[], 'name':vertex_name }
                    clientdata['vertices'][vertex_name] = { 'edges':[], 'name':vertex_name }
                    pythondata['vertices'][vertex_name] = { 'edges':[], 'name':vertex_name }
                else:
                    if col_name in serverCols:
                        serverdata['vertices'][vertex_name][col_name] = line[i]
                    if col_name in clientCols:
                        clientdata['vertices'][vertex_name][col_name] = line[i]
                        pythondata['vertices'][vertex_name][col_name] = line[i]

    # parse the edges
    sheet = get_sheet(spreadsheet, sheets['edges'])
    printf( msg='parsing sheet `edges`', priority=4 )
    for li, line in enumerate(sheet):
        printf( msg='%s' % '\t'.join(line), priority=5 )
        if not(li):
            header = line
        else:
            for i in range(len(line)):
                col_name = header[i]

                if col_name.startswith('is'):
                    line[i] = len(line[i])>0

                if col_name == 'name':
                    edge_name = replace_name( 'e', line[i] )
                    serverdata['edges'][edge_name] = { 'name':edge_name }
                    clientdata['edges'][edge_name] = { 'name':edge_name }
                    pythondata['edges'][edge_name] = { 'name':edge_name }

                    # make sure the testing capacity is there
                    path = os.path.join('tests','commands','edges',edge_name)
                    with open(path, 'a'):
                        os.utime(path)

                elif col_name == 'source':
                    vertex_name = replace_name( 'v', line[i] )
                    serverdata['vertices'][vertex_name]['edges'].append( edge_name )
                    clientdata['vertices'][vertex_name]['edges'].append( edge_name )
                    pythondata['vertices'][vertex_name]['edges'].append( edge_name )
                elif col_name == 'target':
                    vertex_name = replace_name( 'v', line[i] )
                    serverdata['edges'][edge_name][col_name] = vertex_name
                    clientdata['edges'][edge_name][col_name] = vertex_name
                    pythondata['edges'][edge_name][col_name] = vertex_name
                else:
                    if col_name in serverCols:
                        serverdata['edges'][edge_name][col_name] = line[i]
                    if col_name in clientCols:
                        clientdata['edges'][edge_name][col_name] = line[i]
                        pythondata['edges'][edge_name][col_name] = line[i]

    # coerce the dicts -> JSON objects
    serverdata = json.dumps(serverdata,indent=4)
    clientdata = json.dumps(clientdata,indent=4)
    pythondata = json.dumps(pythondata,indent=4)

    # first make the version that will live on the server
    serverdata = re.sub(r'"(func.*\})"', r'\1', serverdata)
    for key in serverCols:
        serverdata = re.sub( r'"%s"' % key, r'%s' % key, serverdata )

    # "roll that shit, write that shit, smoke it" - Method Man
    funcs = get_project_path('app','logic','graph','server-funcs.js')
    with open( funcs, 'r' ) as f:
        funcs = f.read()
        built = get_project_path('app','logic','graph','graph.js')
        with open( built, 'w' ) as b:
            b.write( '{}\nmodule.exports = {}'.format(funcs, serverdata) )

    # put another copy in the public directory
    # first make the version that will live on the server
    clientdata = re.sub(r'"(func.*\})"', r'\1', clientdata)
    for key in clientCols:
        clientdata = re.sub( r'"%s"' % key, r'%s' % key, clientdata )

    # "roll that shit, write that shit, smoke it" - Method Man
    funcs = get_project_path('app','logic','graph','client-funcs.js')
    with open( funcs, 'r' ) as f:
        funcs = f.read()
        built = get_project_path('public','resources','graph.js')
        with open( built, 'w' ) as b:
            b.write( '{}\nconst _STATE_GRAPH = {}'.format(funcs, clientdata) )


def get_project_path(*args):
    return os.path.join(
        os.path.dirname(os.path.realpath(__file__)),
        os.path.join('..',*args) )

def replace_name( prefix, name ):
    '''
    Prefix a variable name with a defined scheme.

    @param prefix
    @param name
    @return             prefixed variable name
    '''
    return '_%s_%s' % ( prefix, name.replace(' ','_') )

def printf( msg='', priority=1 ):
    '''
    Print wrapper to handle verbosity.  Also redirects print statements to
    stderr to avoid conflicts with data writing to stdout.

    @param  msg         message to be printed
    @param  priority    message will be printed unless VERBOSITY is < this value
    @return             None
    '''

    global VERBOSITY
    if priority <= VERBOSITY:
        print( msg, file=sys.stderr )

VERBOSITY = 1

if __name__ == '__main__':

    # get arguments
    parser = argparse.ArgumentParser()
    parser.add_argument( '-q', '--quiet', action='store_true' )
    parser.add_argument( '-v', '--verbose', action='count', default=1 )
    args = parser.parse_args()

    # more argument parsing
    VERBOSITY = 0 if args.quiet else min(args.verbose,5)

    # write it
    get_state_graph()
